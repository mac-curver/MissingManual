//// a very simple Cocoa CoreAudio app// by James McCartney  james@audiosynth.com  www.audiosynth.com//// Frequency Generator Controller - this controller class manages the GUI and forwards actions to the Frequency Generator.//#import "ToneToHertzTransformer.h"#import "Frequency Generator Controller.h"#import "Frequency Generator.h"@implementation FrequencyGeneratorController- (id) init{	[super init];	// create an autoreleased instance of our value transformer	halftoneToHzTransformer = [[[ToneToHertzTransformer alloc] init] retain];	// register it with the name that we refer to it with	[NSValueTransformer setValueTransformer:halftoneToHzTransformer forName:@"ToneToHertzTransformer"];	return self;}- (void)awakeFromNib{    [oscillator setupAudio];									// this will initialize our CoreAudio data    //[[ampControl window] makeKeyAndOrderFront: self];			// window to front	[self setAmpLeft:amplitudeControlLeft];						// setup fields with control values	[self setAmpRight:amplitudeControlRight];	[self setFreqRight:frequencyControlRight];	[self setFreqLeft:frequencyControlLeft];	[self setDutyCycleLeft:dutyCycleControlLeft];	[self setDutyCycleRight:dutyCycleControlRight];	[self setOscillatorTypeLeft:OscTypeLeftPopUpButton];	[self setOscillatorTypeRight:OscTypeRightPopUpButton];	[self setMixer:mixerControl];	[self setPhase:phaseControl];}- (IBAction)setAmpLeft:(id)sender{    double ampLeft = [sender doubleValue];    [oscillator setAmpLeftVal:ampLeft/100.0];}- (IBAction)setAmpRight:(id)sender{    double ampRight = [sender doubleValue];    [oscillator setAmpRightVal:ampRight/100.0];}- (IBAction)setFreqLeft:(id)sender{    // changed by HJS    double			frequencyLeft = [[halftoneToHzTransformer transformedValue:sender] doubleValue];	    [oscillator setFreqLeftVal:frequencyLeft];	[phaseField setDoubleValue:1/0.0];	}- (IBAction)setFreqHzLeft:(id)sender{    // changed by HJS    double			frequencyLeft = [sender doubleValue];    [oscillator setFreqLeftVal:frequencyLeft];	[phaseField setDoubleValue:1/0.0];}- (IBAction)setFreqRight:(id)sender{    // changed by HJS    double			frequencyRight = [[halftoneToHzTransformer transformedValue:sender] doubleValue];	    [oscillator setFreqRightVal:frequencyRight];	[phaseField setDoubleValue:1/0.0];}- (IBAction)setFreqHzRight:(id)sender{    // changed by HJS    double			frequencyRight = [sender doubleValue];	    [oscillator setFreqRightVal:frequencyRight];	[phaseField setDoubleValue:1/0.0];}- (IBAction)setDutyCycleLeft:(id)sender{    double value = [sender doubleValue];	[oscillator				setDutyCycleLeftVal:value/100.0];	}- (IBAction)setDutyCycleRight:(id)sender{    double value = [sender doubleValue];	[oscillator				setDutyCycleRightVal:value/100.0];	}- (IBAction)setOscillatorTypeLeft:(id)sender{	// added by HJS	int	oscillatorTypeLeft = [sender indexOfSelectedItem];	[oscillator setOscillatorTypeLeftVal:oscillatorTypeLeft];	switch (oscillatorTypeLeft) {		case 1:			[parameterBox	setTitle:@"Duty Cycle"];			[dutyCycleControlLeft	setEnabled:true];			[dutyCycleFieldLeft		setEnabled:true];			break;		case 5:			[parameterBox	setTitle:@"Freq. Ratio"];			[dutyCycleControlLeft	setEnabled:true];			[dutyCycleFieldLeft		setEnabled:true];			break;		default:			//[parameterBox	setTitle:@"Unused"];			[dutyCycleControlLeft	setEnabled:false];			[dutyCycleFieldLeft		setEnabled:false];			break;	}}- (IBAction)setOscillatorTypeRight:(id)sender{	// added by HJS	int	oscillatorTypeRight = [sender indexOfSelectedItem];	[oscillator setOscillatorTypeRightVal:oscillatorTypeRight];	switch (oscillatorTypeRight) {		case 1:			[parameterBox	setTitle:@"Duty Cycle"];			[dutyCycleControlRight	setEnabled:true];			[dutyCycleFieldRight	setEnabled:true];			break;		case 5:			[parameterBox	setTitle:@"Freq. Ratio"];			[dutyCycleControlRight	setEnabled:true];			[dutyCycleFieldRight	setEnabled:true];			break;		default:			//[parameterBox	setTitle:@"Unused"];			[dutyCycleControlRight	setEnabled:false];			[dutyCycleFieldRight	setEnabled:false];			break;	}}- (IBAction)setMixer:(id)sender{    double mixer = [sender doubleValue];    [oscillator setMixerVal: mixer/100.0];}- (IBAction)setPhase:(id)sender{	double value = [sender doubleValue];						// in units of unit circle 360 deg == 1	[oscillator setPhaseVal:value/360.0];}- (IBAction)startStop:(id)sender{    if ([sender intValue]) {		[self run:sender];	} else {		[self stop:sender];	}}- (IBAction)run:(id)sender{	[oscillator startAudio];	if (startStopButton != sender) {		[startStopButton setIntValue:1];	}}- (IBAction)stop:(id)sender{	[oscillator stopAudio];	if (startStopButton != sender) {		[startStopButton setIntValue:0];	}}- (void) dealloc{	[halftoneToHzTransformer release];	[super dealloc];}@end