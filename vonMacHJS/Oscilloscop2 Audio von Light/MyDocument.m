////  MyDocument.m//  Oscilloscop2////  Created by Heinz-Jšrg on Sun Jun 1 2003.//  Copyright (c) 2003 Heinz-Jšrg SCHR…DER. All rights reserved.////	Version 1.30: 28.12.2004		all double replaced by float!#import		"TriggerTransformer.h"#import 	"ScientificImage.h"#import 	"ImageAxis.h"#import 	"HorizontalImageAxis.h"#import 	"VerticalImageAxis.h"#import		"MyImageView.h"#import		"MyDocument.h"#import		"NumberEntry.h"@implementation MyDocumentBOOL	hiddenValue = TRUE;#pragma mark --- Key bindings ---- (BOOL)			hidden {   return hiddenValue;}- (void)			setHidden:(BOOL) newValue{	hiddenValue = newValue;	return;}- (float)			myOffset1{	return    [originalImageView yOffsetValue:0];}- (float)			myOffset2{	return    [originalImageView yOffsetValue:1];}- (float)			myOffset3{	return    [originalImageView yOffsetValue:2];}- (float)			myOffset4{	return    [originalImageView yOffsetValue:3];}- (float)			myOffset5{	return    [originalImageView yOffsetValue:4];}- (float)			myOffset6{	return    [originalImageView yOffsetValue:5];}- (float)			myOffset7{	return    [originalImageView yOffsetValue:6];}- (float)			myOffset8{	return    [originalImageView yOffsetValue:7];}- (void)			setMyOffset1:(float) newValue{	[originalImageView setYOffsetValue:newValue channel:0];	return;}- (void)			setMyOffset2:(float) newValue{	[originalImageView setYOffsetValue:newValue channel:1];	return;}- (void)			setMyOffset3:(float) newValue{	[originalImageView setYOffsetValue:newValue channel:2];	return;}- (void)			setMyOffset4:(float) newValue{	[originalImageView setYOffsetValue:newValue channel:3];	return;}- (void)			setMyOffset5:(float) newValue{	[originalImageView setYOffsetValue:newValue channel:4];	return;}- (void)			setMyOffset6:(float) newValue{	[originalImageView setYOffsetValue:newValue channel:5];	return;}- (void)			setMyOffset7:(float) newValue{	[originalImageView setYOffsetValue:newValue channel:6];	return;}- (void)			setMyOffset8:(float) newValue{	[originalImageView setYOffsetValue:newValue channel:7];	return;}- (float)			myYScale1{	return    [originalImageView yScaleValue:0];}- (float)			myYScale2{	return    [originalImageView yScaleValue:1];}- (float)			myYScale3{	return    [originalImageView yScaleValue:2];}- (float)			myYScale4{	return    [originalImageView yScaleValue:3];}- (float)			myYScale5{	return    [originalImageView yScaleValue:4];}- (float)			myYScale6{	return    [originalImageView yScaleValue:5];}- (float)			myYScale7{	return    [originalImageView yScaleValue:6];}- (float)			myYScale8{	return    [originalImageView yScaleValue:7];}- (void)			setMyYScale1:(float) newValue{	[originalImageView setYScaleValue:newValue channel:0];	return;}- (void)			setMyYScale2:(float) newValue{	[originalImageView setYScaleValue:newValue channel:1];	return;}- (void)			setMyYScale3:(float) newValue{	[originalImageView setYScaleValue:newValue channel:2];	return;}- (void)			setMyYScale4:(float) newValue{	[originalImageView setYScaleValue:newValue channel:3];	return;}- (void)			setMyYScale5:(float) newValue{	[originalImageView setYScaleValue:newValue channel:4];	return;}- (void)			setMyYScale6:(float) newValue{	[originalImageView setYScaleValue:newValue channel:5];	return;}- (void)			setMyYScale7:(float) newValue{	[originalImageView setYScaleValue:newValue channel:6];	return;}- (void)			setMyYScale8:(float) newValue{	[originalImageView setYScaleValue:newValue channel:7];	return;}#pragma mark --- Implementation ---enum {	none = 0,	pictureType,	lecroyType,	audioType};#define		REVERSE(x)	byteReverse((char*)&(x), sizeof(x))- (void) 		WaveDescriptorReverse{	REVERSE(myWaveDescriptor.commType);	REVERSE(myWaveDescriptor.commOrder);	REVERSE(myWaveDescriptor.waveDescriptorLength);	REVERSE(myWaveDescriptor.userTextLength);	REVERSE(myWaveDescriptor.resDescriptor1);	REVERSE(myWaveDescriptor.trigTimeLength);	REVERSE(myWaveDescriptor.riseTimeLength);	REVERSE(myWaveDescriptor.resArray1);	REVERSE(myWaveDescriptor.waveArray1Length);	REVERSE(myWaveDescriptor.waveArray2Length);	REVERSE(myWaveDescriptor.resArray2);	REVERSE(myWaveDescriptor.resArray3);	//myWaveDescriptor.instrumentName	REVERSE(myWaveDescriptor.instrumentNumber);	//myWaveDescriptor.traceLabel	REVERSE(myWaveDescriptor.reserved1);	REVERSE(myWaveDescriptor.reserved2);	REVERSE(myWaveDescriptor.waveArrayCount);	REVERSE(myWaveDescriptor.pntsPerScreen);	REVERSE(myWaveDescriptor.firstValidPoint);	REVERSE(myWaveDescriptor.lastValidPoint);	REVERSE(myWaveDescriptor.firstPoint);	REVERSE(myWaveDescriptor.sparsingFactor);	REVERSE(myWaveDescriptor.segmentIndex);	REVERSE(myWaveDescriptor.subArrayCount);	REVERSE(myWaveDescriptor.sweepsPerAcq);	REVERSE(myWaveDescriptor.pointsPerPair);	REVERSE(myWaveDescriptor.pairOffset);	REVERSE(myWaveDescriptor.verticalGain);	REVERSE(myWaveDescriptor.verticalOffset);	REVERSE(myWaveDescriptor.maxValue);	REVERSE(myWaveDescriptor.minValue);	REVERSE(myWaveDescriptor.nominalBits);	REVERSE(myWaveDescriptor.nomSubArrayCount);	REVERSE(myWaveDescriptor.horizInterval);	REVERSE(myWaveDescriptor.horizOffset);	REVERSE(myWaveDescriptor.pixelOffset);	//myWaveDescriptor.verticalUnit	//myWaveDescriptor.horizontalUnit	REVERSE(myWaveDescriptor.reserved3);	REVERSE(myWaveDescriptor.reserved4);		REVERSE(myWaveDescriptor.triggerTime.seconds);	REVERSE(myWaveDescriptor.triggerTime.years);	REVERSE(myWaveDescriptor.acqDuration);	REVERSE(myWaveDescriptor.recordType);	REVERSE(myWaveDescriptor.processingDone);	REVERSE(myWaveDescriptor.reserved5);	REVERSE(myWaveDescriptor.risSweeps);	REVERSE(myWaveDescriptor.timeBase);	REVERSE(myWaveDescriptor.verticalCoupling);	REVERSE(myWaveDescriptor.probeAttenuation);	REVERSE(myWaveDescriptor.fixedVerticalGain);	REVERSE(myWaveDescriptor.bandWidthLimit);	REVERSE(myWaveDescriptor.verticalVernier);	REVERSE(myWaveDescriptor.acqVertOffset);	REVERSE(myWaveDescriptor.waveSource);}- (void) addValueToArray:(NSString *)value forName:(NSString *)name ofType:(NSString *)type{	NSMutableDictionary		*myDict = [[NSMutableDictionary alloc] init];		[myDict		setObject:value forKey:@"Value"];	[myDict		setObject:name	forKey:@"Key"];	[myDict		setObject:type	forKey:@"Type"];	[myArray	addObject:myDict];	[myDict		release];}	- (id)init{    NSInteger			i;		self = [super init];    if (self) {		// create an autoreleased instance of our value transformer & register it with the name that we refer to it with		myTriggerTransformer = [[[TriggerTransformer alloc] init] retain];		[NSValueTransformer setValueTransformer:myTriggerTransformer forName:@"TriggerTransformer"];        // Add your subclass-specific initialization here.        // If an error occurs here, send a [self release] message and return nil.		for (i = 0; i < 8; i++) {			channel[i] = nil;			length[i]  = 0;		}		myFileType = audioType;				//Similarly, to set a value for a default, use setValue:forKey:.		//[[theDefaultsController values] setValue:newUserName forKey:@"userName"];				myArray = [[NSMutableArray alloc] init];				[myArray	retain];			}    return self;}- (NSString *)windowNibName{    // Override returning the nib file name of the document    // If you need to use a subclass of NSWindowController or if your document supports multiple NSWindowControllers, 	// you should remove this method and override -makeWindowControllers instead.    return @"MyDocument";}- (void)windowControllerDidLoadNib:(NSWindowController *) aController{    NSInteger			i;		[super windowControllerDidLoadNib:aController];    // Add any code here that needs to be executed once the windowController has loaded the document's window.	switch (myFileType) {		case 		pictureType:			[originalImageView setImage:myImage];			break;		case		audioType:			for (i = 0; i < 2; i++) {											// 2 audio channels				if (nil == channel[i]) {					length[i] = 8192;					channel[i] = malloc(length[i]*sizeof(float));					zeroIndex[i] = malloc(length[i]*sizeof(NSUInteger));				}			}			for (i = 4; i < 8; i++) {											// 4 math channels				if (nil == channel[i]) {					length[i] = 8192;					channel[i] = malloc(length[i]*sizeof(float));				}			}			grabber = [[SoundInputGrabber alloc] initWithDelegate:self callbackSelector:@selector(copyAudioBuffer:)];    			[grabber start];			// fall through!		case		lecroyType:			[originalImageView				enableChannel:0 enabled:(nil != channel[0])];			[originalImageView				enableChannel:1 enabled:(nil != channel[1])];			[originalImageView				enableChannel:2 enabled:(nil != channel[2])];			[originalImageView				enableChannel:3 enabled:(nil != channel[3])];			[originalImageView				initFirstDisplay];			break;	}	[[parameters cellWithTag: 0] setStringValue:[self descriptor]];	[[parameters cellWithTag: 1] setStringValue:[self template]];	[[parameters cellWithTag: 2] setIntValue:   (int)[self descLength]];	[[parameters cellWithTag: 3] setStringValue:[self instrumentName]];	[[parameters cellWithTag: 4] setStringValue:[NSString stringWithFormat:@"%f V/div", [self verticalGain]]];	[[parameters cellWithTag: 5] setStringValue:[NSString stringWithFormat:@"%E V", [self verticalOffset]]];	[[parameters cellWithTag: 6] setStringValue:[NSString stringWithFormat:@"%E s", [self horizontalInterval]]];	[[parameters cellWithTag: 7] setStringValue:[NSString stringWithFormat:@"%E s", [self horizontalOffset]]];	[[parameters cellWithTag: 8] setStringValue:[self triggerTime]];	[[parameters cellWithTag: 9] setStringValue:[NSString stringWithFormat:@"%f s/div", [self timeBase]]];	[[parameters cellWithTag:10] setStringValue:[self coupling]];	[[parameters cellWithTag:11] setStringValue:[NSString stringWithFormat:@"%f x",  [self fixedVerticalGain]]];	[[parameters cellWithTag:12] setStringValue:[self bandwidthLimit]];	[self addValueToArray:[self descriptor] forName:@"Descriptor" ofType:@"char[16]"];	[self addValueToArray:[self template] forName:@"Template" ofType:@"char[16]"];    [self addValueToArray:[NSString stringWithFormat:@"%lu", (unsigned long)[self descLength]] forName:@"Descriptor Length" ofType:@"long"];	[self addValueToArray:[self instrumentName] forName:@"Instrument Name" ofType:@"char16"];	[self addValueToArray:[NSString stringWithFormat:@"%f V/div", [self verticalGain]] forName:@"Vertical Gain" ofType:@"float"];	[self addValueToArray:[NSString stringWithFormat:@"%E V", [self verticalOffset]] forName:@"Vertical Offest" ofType:@"float"];	[self addValueToArray:[NSString stringWithFormat:@"%E s", [self horizontalInterval]] forName:@"Horizontal Interval" ofType:@"float"];	[self addValueToArray:[NSString stringWithFormat:@"%E s", [self horizontalOffset]] forName:@"Horizontal Offset" ofType:@"float"];	[self addValueToArray:[self triggerTime] forName:@"Trigger Time" ofType:@"timeStamp"];	[self addValueToArray:[NSString stringWithFormat:@"%f s/div", [self timeBase]] forName:@"Time Base" ofType:@"word"];	[self addValueToArray:[self coupling] forName:@"Vertical Coupling" ofType:@"word"];	[self addValueToArray:[NSString stringWithFormat:@"%f x",  [self fixedVerticalGain]] forName:@"Fixed Gain incl. Atten." ofType:@"word"];	[self addValueToArray:[self bandwidthLimit] forName:@"Bandwidth Limit" ofType:@"word"];}- (void)    copyAudioBuffer:(AudioBuffer *)AUbuffer{	NSInteger				i; 	static NSInteger		j = 0;	float			*myLeftBuffer;	float			*myRightBuffer;	NSUInteger		audioLength;	NSUInteger		bufferLength;		audioLength = AUbuffer->mDataByteSize>>2;									// size is float	bufferLength  = length[0];	myLeftBuffer  = channel[0];	myRightBuffer = channel[1];	for (i = 0; i < audioLength; i += 2) {		myLeftBuffer[j]  = ((float*)AUbuffer->mData)[i];		myRightBuffer[j] = ((float*)AUbuffer->mData)[i+1];		j ++;		if (bufferLength <= j) {			j = 0;			/*			[self		updateDrawing];			*/		}	}}- (NSData *)dataRepresentationOfType:(NSString *)aType{    // Insert code here to write your document from the given data.  You can also choose to override -fileWrapperRepresentationOfType: or -writeToFile:ofType: instead.    return nil;}- (void)loadBinaryHeader:(NSData *)data{	NSRange				snRange = NSMakeRange(0, 11);							// range for SN suppression	NSRange				descRange = NSMakeRange(11, sizeof(myWaveDescriptor));	// range for header	char				serialNumber[11];		[data getBytes:(void*)(&serialNumber) range:snRange];						// last file loaded overwrites the header!!!	[data getBytes:(void*)(&myWaveDescriptor) range:descRange];					// last file loaded overwrites the header!!!	if (0 != myWaveDescriptor.commOrder) {										// if != 0 intel low endian otherwise big endian		[self WaveDescriptorReverse];	}}- (void)loadBinaryData:(NSData *)myData  length:(NSUInteger)myLength of:(NSUInteger)channelNumber {	NSRange				myRange;												// range to get the bytes	char				*charBuffer;											// byte buffer	Boolean				positiveSign;	NSUInteger			lastZeroPosition;	NSInteger					k;		length[channelNumber]		= myLength-(sizeof(myWaveDescriptor)+11);		// file length without header	channel[channelNumber]		= malloc(length[channelNumber]*sizeof(float));	zeroIndex[channelNumber]	= malloc(length[channelNumber]*sizeof(NSUInteger));	charBuffer = malloc(length[channelNumber]);													myRange = NSMakeRange(sizeof(myWaveDescriptor)+11, myLength);				// start after header	[myData getBytes:(void*)charBuffer range:myRange];							// 	positiveSign = 0 < charBuffer[0];	lastZeroPosition = 0;	for (k = 0; k < length[channelNumber]; k++) {		channel[channelNumber][k] = charBuffer[k]/128.0;						// copy data into correct format (scaling for +/-1 Volt!!!)#ifdef SCHLECHT		if ((0 < charBuffer[k]) != positiveSign) {			positiveSign = 0 < charBuffer[k];			lastZeroPosition ++;												// next index for zero cross detection			zeroPosition[channelNumber][lastZeroPosition] = k;					// just the index in the array+...		}		zeroIndex[channelNumber][k]= lastZeroPosition;#else		channel[4][k] += charBuffer[k]/512.0;#endif	}	free(charBuffer);}- (BOOL) loadDataRepresentation:(NSData *)data ofType:(NSString *)aType{	Boolean				fileTypeRecognized = NO;								// returns YES		//NSLog([data MIMEType]);		    if ([aType isEqualToString:@"JPEG"]			||		[aType isEqualToString:@"JPG"]			||		[aType isEqualToString:@"OS-Type-JPEG"]	)  {		myFileType = pictureType;		myImage = [[NSImage alloc] initWithData:data];		        fileTypeRecognized = YES;	} else {	/* ([aType isEqualToString:@"LeCroyA"] || [aType isEqualToString:@"LeCroyB"] ||		[aType isEqualToString:@"LeCroyC"] || [aType isEqualToString:@"LeCroyD"] ||		[aType isEqualToString:@"LeCroyE"] || [aType isEqualToString:@"LeCroyT"]) */		NSString		*pathName = [self fileName];		NSMutableArray	*pathComponents = (NSMutableArray*)[pathName pathComponents];		NSUInteger		lastIndex = [pathComponents count]-1;		NSMutableString	*fileName = [NSMutableString stringWithString:[pathComponents objectAtIndex:lastIndex]];		NSCharacterSet	*pointSet = [NSCharacterSet characterSetWithCharactersInString:@"."];		NSRange			pointRange = [fileName rangeOfCharacterFromSet:pointSet];				pointRange.location--;		pointRange.length = 1;				NSInteger				i;		NSUInteger		maxLength = 0;		NSData			*myData[4];		for (i = 0; i < 4; i++) {															// load up to 4 channels            NSString		*channelString = [NSString  stringWithFormat:@"%ld", i+1];		// produce channel number string			[fileName replaceCharactersInRange:pointRange withString:channelString];		// filenames like SC1.000, SC2.000, SC3.000, SC4.000			[pathComponents replaceObjectAtIndex:lastIndex withObject:fileName];			// 			NSString		*newAbsPathName = [NSString pathWithComponents:pathComponents];	// compose filenames from components			myData[i] = [NSData dataWithContentsOfFile:newAbsPathName];						// load the data						if (0 != [myData[i] bytes]) {													// empty if file does not exists				[self loadBinaryHeader:myData[i]];											// range for header suppression				fileTypeRecognized = YES;				if (maxLength < [myData[i] length]) {					maxLength = [myData[i] length];				}			}		}		maxLength = maxLength-(sizeof(myWaveDescriptor)+11);		for (i = 0; i < 4; i++) {															// load up to 4 channels			channel[i+4]	= malloc(maxLength*sizeof(float));								// allocate array for all zero positions			if (0 != [myData[i] bytes]) {													// empty if file does not exists				[self loadBinaryData:myData[i] length:[myData[i] length] of:i];					// load the data without header			}		}		if (!fileTypeRecognized) {												// file loading above did not succeed load...			[self loadBinaryHeader:data];										// range for header suppression			[self loadBinaryData:data length:[data length] of:0];		}		myFileType = lecroyType;        fileTypeRecognized = YES;    }	return fileTypeRecognized;}- (WaveDescriptor*)   header{	return  &myWaveDescriptor;}- (NSString*)	descriptor{	return [NSString stringWithCString:myWaveDescriptor.descriptor encoding:NSASCIIStringEncoding];}- (NSString*)	template{	return [NSString stringWithCString:myWaveDescriptor.template encoding:NSASCIIStringEncoding];}- (NSUInteger)	descLength{	return myWaveDescriptor.waveDescriptorLength;}- (NSString*)	instrumentName{	return [NSString stringWithCString:myWaveDescriptor.instrumentName encoding:NSASCIIStringEncoding];}- (double)	verticalGain{	return myWaveDescriptor.verticalGain;}- (double)	verticalOffset{	return myWaveDescriptor.verticalOffset;}- (double)	horizontalInterval{	return myWaveDescriptor.horizInterval;}- (double)	horizontalOffset{	return myWaveDescriptor.horizOffset;}- (NSString*)	triggerTime{	return @"00.00.0000 ...";}- (double)	timeBase{	NSUInteger	digit = myWaveDescriptor.timeBase % 3;	NSUInteger	base  = myWaveDescriptor.timeBase / 3;	double		value = 0;	switch (digit) {		case 0: 			value = 1E-9;			break;		case 1:			value = 2E-9;			break;		case 2:			value = 5E-9;			break;	}	value = value * pow(10, base);	return value;}- (NSString*)	coupling{	switch(myWaveDescriptor.verticalCoupling) {		case 0: 			return @"DC 50 Ohm";		case 1:			return @"ground";		case 2:			return @"DC 1 MOhm";		case 3:			return @"ground";		case 4:			return @"AC 1 MOhm";				}	return @"invalid";}- (double)	fixedVerticalGain{	NSUInteger	digit = myWaveDescriptor.fixedVerticalGain % 3;	NSUInteger	base  = myWaveDescriptor.fixedVerticalGain / 3;	double		value = 0;	switch (digit) {		case 0: 			value = 1E-6;			break;		case 1:			value = 2E-6;			break;		case 2:			value = 5E-6;			break;	}	value = value * pow(10, base);	return value;}- (NSString*)	bandwidthLimit{	switch(myWaveDescriptor.bandWidthLimit) {		case 0: 			return @"Off";		case 1:			return @"On";	}	return @"invalid";}- (float*)		channel:(NSUInteger)number{	return  channel[number];}- (NSUInteger*)		zeroIndex:(NSUInteger)number{	return  zeroIndex[number];}- (NSUInteger)	length:(NSUInteger)number{	return  length[number];}- (NSUInteger)	shortestLength{	NSUInteger	i;	NSUInteger	minimum = 0;		for (i = 0; i < 4; i++) {		if (0 != length[i]) {			if ((0 == minimum) || (minimum > length[i])) {				minimum = length[i];											// shortest length != 0			}		}	}	return	minimum;}- (id)tableView:(NSTableView *)theTableView 	objectValueForTableColumn:(NSTableColumn *)column    row:(NSInteger)rowIndex{	return [[myArray objectAtIndex:rowIndex] objectForKey:[column identifier]];}- (NSInteger)				numberOfRowsInTableView:(NSTableView *)aTableView{    return [myArray count];}- (void)			dealloc {	NSInteger			i;		[grabber			stop];    [grabber			release];	[myImage			release];	[originalImageView	release];	for (i = 0; i < 4; i++) {		if (channel[i]) free(channel[i]);		if (channel[i+4]) free(channel[i+4]);		if (zeroIndex[i]) free(zeroIndex[i]);	}	[myArray	release];	[myTriggerTransformer release];    [super dealloc];}@end